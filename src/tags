!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ButtonStatus	input.h	/^struct ButtonStatus$/;"	s
ButtonStatus::down	input.h	/^	bool down;$/;"	m	struct:ButtonStatus	access:public
ButtonStatus::pressed	input.h	/^	bool pressed;$/;"	m	struct:ButtonStatus	access:public
ButtonStatus::released	input.h	/^	bool released;$/;"	m	struct:ButtonStatus	access:public
Collision	sprite.h	/^struct Collision{$/;"	s
Collision::bounding_box	sprite.h	/^	std::vector< sf::Rect<int> > bounding_box;$/;"	m	struct:Collision	access:public
DRAW_CLEAR	render.h	/^enum DrawEventId{DRAW_OBJECT, DRAW_DRAWABLE, DRAW_CLEAR,$/;"	e	enum:DrawEventId
DRAW_DRAWABLE	render.h	/^enum DrawEventId{DRAW_OBJECT, DRAW_DRAWABLE, DRAW_CLEAR,$/;"	e	enum:DrawEventId
DRAW_OBJECT	render.h	/^enum DrawEventId{DRAW_OBJECT, DRAW_DRAWABLE, DRAW_CLEAR,$/;"	e	enum:DrawEventId
DrawEvent	render.h	/^struct DrawEvent$/;"	s
DrawEvent::color	render.h	/^	sf::Color color;$/;"	m	struct:DrawEvent	access:public
DrawEvent::depth	render.h	/^	int depth;$/;"	m	struct:DrawEvent	access:public
DrawEvent::drawable	render.h	/^	const sf::Drawable* drawable;$/;"	m	struct:DrawEvent	access:public
DrawEvent::id	render.h	/^	DrawEventId id;$/;"	m	struct:DrawEvent	access:public
DrawEvent::operator <	render.h	/^	bool operator < (const DrawEvent& event) const$/;"	f	struct:DrawEvent	access:public	signature:(const DrawEvent& event) const
DrawEventId	render.h	/^enum DrawEventId{DRAW_OBJECT, DRAW_DRAWABLE, DRAW_CLEAR,$/;"	g
DrawEventIdSize	render.h	/^	DrawEventIdSize};$/;"	e	enum:DrawEventId
GameObject	gameobject.h	/^class GameObject$/;"	c
GameObject::acceleration	gameobject.h	/^		Vector2<double> acceleration;$/;"	m	class:GameObject	access:protected
GameObject::add_acceleration	gameobject.cpp	/^void GameObject::add_acceleration(const Vector2<double>& acceleration_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& acceleration_vector)
GameObject::add_acceleration	gameobject.cpp	/^void GameObject::add_acceleration(float x, float y)$/;"	f	class:GameObject	signature:(float x, float y)
GameObject::add_acceleration	gameobject.h	/^		void add_acceleration(const Vector2<double>& acceleration_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& acceleration_vector)
GameObject::add_acceleration	gameobject.h	/^		void add_acceleration(float x, float y);$/;"	p	class:GameObject	access:public	signature:(float x, float y)
GameObject::add_animation	gameobject.cpp	/^int GameObject::add_animation()$/;"	f	class:GameObject	signature:()
GameObject::add_animation	gameobject.h	/^		int add_animation();$/;"	p	class:GameObject	access:public	signature:()
GameObject::add_frame	gameobject.cpp	/^void GameObject::add_frame(int animation, Sprite* sprite, int n)$/;"	f	class:GameObject	signature:(int animation, Sprite* sprite, int n)
GameObject::add_frame	gameobject.h	/^		void add_frame(int animation, Sprite* sprite, int n);$/;"	p	class:GameObject	access:public	signature:(int animation, Sprite* sprite, int n)
GameObject::add_velocity	gameobject.cpp	/^void GameObject::add_velocity(const Vector2<double>& velocity_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& velocity_vector)
GameObject::add_velocity	gameobject.cpp	/^void GameObject::add_velocity(float x, float y)$/;"	f	class:GameObject	signature:(float x, float y)
GameObject::add_velocity	gameobject.h	/^		void add_velocity(const Vector2<double>& velocity_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& velocity_vector)
GameObject::add_velocity	gameobject.h	/^		void add_velocity(float x, float y);$/;"	p	class:GameObject	access:public	signature:(float x, float y)
GameObject::animations	gameobject.h	/^		std::vector< std::vector<Sprite*> > animations;$/;"	m	class:GameObject	access:protected
GameObject::append_frame	gameobject.cpp	/^void GameObject::append_frame(int animation, Sprite* sprite)$/;"	f	class:GameObject	signature:(int animation, Sprite* sprite)
GameObject::append_frame	gameobject.h	/^		void append_frame(int animation, Sprite* sprite);$/;"	p	class:GameObject	access:public	signature:(int animation, Sprite* sprite)
GameObject::current_animation	gameobject.h	/^		int current_animation, current_frame;$/;"	m	class:GameObject	access:protected
GameObject::current_frame	gameobject.h	/^		int current_animation, current_frame;$/;"	m	class:GameObject	access:protected
GameObject::depth	gameobject.h	/^		int depth;$/;"	m	class:GameObject	access:protected
GameObject::events	gameobject.h	/^		std::vector< ObjectEvent* > events;$/;"	m	class:GameObject	access:protected
GameObject::get_current_frame	gameobject.cpp	/^Sprite* GameObject::get_current_frame()$/;"	f	class:GameObject	signature:()
GameObject::get_current_frame	gameobject.h	/^		Sprite* get_current_frame();$/;"	p	class:GameObject	access:public	signature:()
GameObject::get_frame	gameobject.cpp	/^Sprite* GameObject::get_frame(int animation, int n)$/;"	f	class:GameObject	signature:(int animation, int n)
GameObject::get_frame	gameobject.cpp	/^Sprite* GameObject::get_frame(int n)$/;"	f	class:GameObject	signature:(int n)
GameObject::get_frame	gameobject.h	/^		Sprite* get_frame(int animation, int n);$/;"	p	class:GameObject	access:public	signature:(int animation, int n)
GameObject::get_frame	gameobject.h	/^		Sprite* get_frame(int n);$/;"	p	class:GameObject	access:public	signature:(int n)
GameObject::get_position	gameobject.cpp	/^Vector2<double> GameObject::get_position()$/;"	f	class:GameObject	signature:()
GameObject::get_position	gameobject.h	/^		Vector2<double> get_position();$/;"	p	class:GameObject	access:public	signature:()
GameObject::id	gameobject.h	/^		GameObjectId id;$/;"	m	class:GameObject	access:protected
GameObject::instance_id	gameobject.h	/^		int instance_id;$/;"	m	class:GameObject	access:protected
GameObject::move	gameobject.cpp	/^void GameObject::move(const Vector2<double>& move_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& move_vector)
GameObject::move	gameobject.cpp	/^void GameObject::move(double x, double y)$/;"	f	class:GameObject	signature:(double x, double y)
GameObject::move	gameobject.h	/^		void move(const Vector2<double>& move_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& move_vector)
GameObject::move	gameobject.h	/^		void move(double x, double y);$/;"	p	class:GameObject	access:public	signature:(double x, double y)
GameObject::next_frame	gameobject.cpp	/^void GameObject::next_frame()$/;"	f	class:GameObject	signature:()
GameObject::next_frame	gameobject.h	/^		void next_frame();$/;"	p	class:GameObject	access:public	signature:()
GameObject::position	gameobject.h	/^		Vector2<double> position;$/;"	m	class:GameObject	access:protected
GameObject::process_events	gameobject.cpp	/^void GameObject::process_events()$/;"	f	class:GameObject	signature:()
GameObject::process_events	gameobject.h	/^		void process_events();$/;"	p	class:GameObject	access:public	signature:()
GameObject::process_events	gameobject.h	/^		void process_events(T);$/;"	p	class:GameObject	access:public	signature:(T)
GameObject::register_event	gameobject.cpp	/^void GameObject::register_event(bool* trigger, void (*response)() )$/;"	f	class:GameObject	signature:(bool* trigger, void (*response)() )
GameObject::register_event	gameobject.h	/^		void register_event(bool*, void (*new_response)() );$/;"	p	class:GameObject	access:public	signature:(bool*, void (*new_response)() )
GameObject::register_event	gameobject.h	/^		void register_event(bool*, void (*new_response)(T) );$/;"	p	class:GameObject	access:public	signature:(bool*, void (*new_response)(T) )
GameObject::remove_event	gameobject.cpp	/^void GameObject::remove_event(bool* tocheck)$/;"	f	class:GameObject	signature:(bool* tocheck)
GameObject::remove_event	gameobject.h	/^		void remove_event(bool*);$/;"	p	class:GameObject	access:public	signature:(bool*)
GameObject::set_acceleration	gameobject.cpp	/^void GameObject::set_acceleration(const Vector2<double>& acceleration_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& acceleration_vector)
GameObject::set_acceleration	gameobject.cpp	/^void GameObject::set_acceleration(float x, float y)$/;"	f	class:GameObject	signature:(float x, float y)
GameObject::set_acceleration	gameobject.h	/^		void set_acceleration(const Vector2<double>& acceleration_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& acceleration_vector)
GameObject::set_acceleration	gameobject.h	/^		void set_acceleration(float x, float y);$/;"	p	class:GameObject	access:public	signature:(float x, float y)
GameObject::set_animation	gameobject.cpp	/^void GameObject::set_animation(int animation)$/;"	f	class:GameObject	signature:(int animation)
GameObject::set_animation	gameobject.h	/^		void set_animation(int animation);$/;"	p	class:GameObject	access:public	signature:(int animation)
GameObject::set_frame	gameobject.cpp	/^void GameObject::set_frame(int n)$/;"	f	class:GameObject	signature:(int n)
GameObject::set_frame	gameobject.h	/^		void set_frame(int n);$/;"	p	class:GameObject	access:public	signature:(int n)
GameObject::set_position	gameobject.cpp	/^void GameObject::set_position(const Vector2<double>& set_to)$/;"	f	class:GameObject	signature:(const Vector2<double>& set_to)
GameObject::set_position	gameobject.cpp	/^void GameObject::set_position(double x, double y)$/;"	f	class:GameObject	signature:(double x, double y)
GameObject::set_position	gameobject.h	/^		void set_position(const Vector2<double>& set_to);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& set_to)
GameObject::set_position	gameobject.h	/^		void set_position(double x, double y);$/;"	p	class:GameObject	access:public	signature:(double x, double y)
GameObject::set_velocity	gameobject.cpp	/^void GameObject::set_velocity(const Vector2<double>& velocity_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& velocity_vector)
GameObject::set_velocity	gameobject.cpp	/^void GameObject::set_velocity(double x, double y)$/;"	f	class:GameObject	signature:(double x, double y)
GameObject::set_velocity	gameobject.h	/^		void set_velocity(const Vector2<double>& velocity_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& velocity_vector)
GameObject::set_velocity	gameobject.h	/^		void set_velocity(double x, double y);$/;"	p	class:GameObject	access:public	signature:(double x, double y)
GameObject::update_sprite	gameobject.cpp	/^void GameObject::update_sprite()$/;"	f	class:GameObject	signature:()
GameObject::update_sprite	gameobject.h	/^		void update_sprite();$/;"	p	class:GameObject	access:public	signature:()
GameObject::velocity	gameobject.h	/^		Vector2<double> velocity;$/;"	m	class:GameObject	access:protected
GameObject::~GameObject	gameobject.cpp	/^GameObject::~GameObject()$/;"	f	class:GameObject	signature:()
GameObject::~GameObject	gameobject.h	/^		~GameObject();$/;"	p	class:GameObject	access:public	signature:()
GameObjectId	ids.h	/^enum GameObjectId{$/;"	g
Input	input.cpp	/^Input::Input(sf::Window& reference_window)$/;"	f	class:Input	signature:(sf::Window& reference_window)
Input	input.h	/^		Input(sf::Window& reference_window);$/;"	p	class:Input	access:public	signature:(sf::Window& reference_window)
Input	input.h	/^class Input$/;"	c
Input::Input	input.cpp	/^Input::Input(sf::Window& reference_window)$/;"	f	class:Input	signature:(sf::Window& reference_window)
Input::Input	input.h	/^		Input(sf::Window& reference_window);$/;"	p	class:Input	access:public	signature:(sf::Window& reference_window)
Input::key_state	input.cpp	/^ButtonStatus Input::key_state(sf::Keyboard::Key key)$/;"	f	class:Input	signature:(sf::Keyboard::Key key)
Input::key_state	input.h	/^		ButtonStatus key_state(sf::Keyboard::Key key);$/;"	p	class:Input	access:public	signature:(sf::Keyboard::Key key)
Input::key_states	input.h	/^		std::vector<ButtonStatus> key_states;$/;"	m	class:Input	access:private
Input::mouse_pos	input.cpp	/^sf::Vector2f Input::mouse_pos()$/;"	f	class:Input	signature:()
Input::mouse_pos	input.h	/^		sf::Vector2f mouse_pos();$/;"	p	class:Input	access:public	signature:()
Input::mouse_pos_rel	input.cpp	/^sf::Vector2f Input::mouse_pos_rel()$/;"	f	class:Input	signature:()
Input::mouse_pos_rel	input.h	/^		sf::Vector2f mouse_pos_rel();$/;"	p	class:Input	access:public	signature:()
Input::mouse_position	input.h	/^		sf::Vector2f mouse_position, mouse_position_rel;$/;"	m	class:Input	access:private
Input::mouse_position_rel	input.h	/^		sf::Vector2f mouse_position, mouse_position_rel;$/;"	m	class:Input	access:private
Input::mouse_state	input.cpp	/^ButtonStatus Input::mouse_state(sf::Mouse::Button button)$/;"	f	class:Input	signature:(sf::Mouse::Button button)
Input::mouse_state	input.h	/^		ButtonStatus mouse_state(sf::Mouse::Button button);$/;"	p	class:Input	access:public	signature:(sf::Mouse::Button button)
Input::mouse_states	input.h	/^		std::vector<ButtonStatus> mouse_states;$/;"	m	class:Input	access:private
Input::outstream	input.h	/^		std::ostream *outstream;$/;"	m	class:Input	access:private
Input::start_logging	input.cpp	/^void Input::start_logging(std::ostream &logstream)$/;"	f	class:Input	signature:(std::ostream &logstream)
Input::start_logging	input.h	/^		void start_logging(std::ostream &logstream);$/;"	p	class:Input	access:public	signature:(std::ostream &logstream)
Input::stop_logging	input.cpp	/^void Input::stop_logging()$/;"	f	class:Input	signature:()
Input::stop_logging	input.h	/^		void stop_logging();$/;"	p	class:Input	access:public	signature:()
Input::update	input.cpp	/^void Input::update()$/;"	f	class:Input	signature:()
Input::update	input.h	/^		void update();$/;"	p	class:Input	access:public	signature:()
Input::window	input.h	/^		sf::Window *window;$/;"	m	class:Input	access:private
Input::window_events	input.cpp	/^WindowStatus Input::window_events()$/;"	f	class:Input	signature:()
Input::window_events	input.h	/^		WindowStatus window_events();$/;"	p	class:Input	access:public	signature:()
Input::window_status	input.h	/^		WindowStatus window_status;$/;"	m	class:Input	access:private
Input::~Input	input.cpp	/^Input::~Input()$/;"	f	class:Input	signature:()
Input::~Input	input.h	/^		~Input();$/;"	p	class:Input	access:public	signature:()
ObjectCount	ids.h	/^	ObjectCount$/;"	e	enum:GameObjectId
ObjectEvent	objectevent.cpp	/^ObjectEvent::ObjectEvent(bool* new_trigger, void (*new_response)())$/;"	f	class:ObjectEvent	signature:(bool* new_trigger, void (*new_response)())
ObjectEvent	objectevent.h	/^		ObjectEvent();$/;"	p	class:ObjectEvent	access:public	signature:()
ObjectEvent	objectevent.h	/^		ObjectEvent(bool* trigger, void (*new_response)());$/;"	p	class:ObjectEvent	access:public	signature:(bool* trigger, void (*new_response)())
ObjectEvent	objectevent.h	/^class ObjectEvent$/;"	c
ObjectEvent::ObjectEvent	objectevent.cpp	/^ObjectEvent::ObjectEvent(bool* new_trigger, void (*new_response)())$/;"	f	class:ObjectEvent	signature:(bool* new_trigger, void (*new_response)())
ObjectEvent::ObjectEvent	objectevent.h	/^		ObjectEvent();$/;"	p	class:ObjectEvent	access:public	signature:()
ObjectEvent::ObjectEvent	objectevent.h	/^		ObjectEvent(bool* trigger, void (*new_response)());$/;"	p	class:ObjectEvent	access:public	signature:(bool* trigger, void (*new_response)())
ObjectEvent::get_trigger	objectevent.cpp	/^bool* ObjectEvent::get_trigger()$/;"	f	class:ObjectEvent	signature:()
ObjectEvent::get_trigger	objectevent.h	/^		bool* get_trigger();$/;"	p	class:ObjectEvent	access:public	signature:()
ObjectEvent::process	objectevent.cpp	/^void ObjectEvent::process()$/;"	f	class:ObjectEvent	signature:()
ObjectEvent::process	objectevent.h	/^		void process();$/;"	p	class:ObjectEvent	access:public	signature:()
ObjectEvent::response	objectevent.h	/^		void (*response)();$/;"	m	class:ObjectEvent	access:private
ObjectEvent::set	objectevent.cpp	/^void ObjectEvent::set(bool* new_trigger, void (*new_response)())$/;"	f	class:ObjectEvent	signature:(bool* new_trigger, void (*new_response)())
ObjectEvent::set	objectevent.h	/^		void set(bool*, void (*response)(GameObject*));$/;"	p	class:ObjectEvent	access:public	signature:(bool*, void (*response)(GameObject*))
ObjectEvent::set_response	objectevent.cpp	/^void ObjectEvent::set_response(void (*new_response)())$/;"	f	class:ObjectEvent	signature:(void (*new_response)())
ObjectEvent::set_response	objectevent.h	/^		void set_response(void (*response)(GameObject*));$/;"	p	class:ObjectEvent	access:public	signature:(void (*response)(GameObject*))
ObjectEvent::set_trigger	objectevent.cpp	/^void ObjectEvent::set_trigger(bool* new_trigger)$/;"	f	class:ObjectEvent	signature:(bool* new_trigger)
ObjectEvent::set_trigger	objectevent.h	/^		void set_trigger(bool* trigger);$/;"	p	class:ObjectEvent	access:public	signature:(bool* trigger)
ObjectEvent::trigger	objectevent.h	/^		bool* trigger;$/;"	m	class:ObjectEvent	access:private
Render	render.cpp	/^Render::Render()$/;"	f	class:Render	signature:()
Render	render.cpp	/^Render::Render(int width, int height, std::string title)$/;"	f	class:Render	signature:(int width, int height, std::string title)
Render	render.cpp	/^Render::Render(sf::RenderTarget& target)$/;"	f	class:Render	signature:(sf::RenderTarget& target)
Render	render.h	/^		Render();$/;"	p	class:Render	access:public	signature:()
Render	render.h	/^		Render(int width, int height, std::string title);$/;"	p	class:Render	access:public	signature:(int width, int height, std::string title)
Render	render.h	/^		Render(sf::RenderTarget& target);$/;"	p	class:Render	access:public	signature:(sf::RenderTarget& target)
Render	render.h	/^class Render$/;"	c
Render::Render	render.cpp	/^Render::Render()$/;"	f	class:Render	signature:()
Render::Render	render.cpp	/^Render::Render(int width, int height, std::string title)$/;"	f	class:Render	signature:(int width, int height, std::string title)
Render::Render	render.cpp	/^Render::Render(sf::RenderTarget& target)$/;"	f	class:Render	signature:(sf::RenderTarget& target)
Render::Render	render.h	/^		Render();$/;"	p	class:Render	access:public	signature:()
Render::Render	render.h	/^		Render(int width, int height, std::string title);$/;"	p	class:Render	access:public	signature:(int width, int height, std::string title)
Render::Render	render.h	/^		Render(sf::RenderTarget& target);$/;"	p	class:Render	access:public	signature:(sf::RenderTarget& target)
Render::clear	render.cpp	/^void Render::clear(sf::Color color, int depth)$/;"	f	class:Render	signature:(sf::Color color, int depth)
Render::clear	render.h	/^		void clear(sf::Color clear_to = sf::Color::Black, int depth = 99999999);$/;"	p	class:Render	access:public	signature:(sf::Color clear_to = sf::Color::Black, int depth = 99999999)
Render::clear_queue	render.cpp	/^void Render::clear_queue()$/;"	f	class:Render	signature:()
Render::clear_queue	render.h	/^		void clear_queue();$/;"	p	class:Render	access:private	signature:()
Render::draw	render.cpp	/^void Render::draw(GameObject& object, int depth)$/;"	f	class:Render	signature:(GameObject& object, int depth)
Render::draw	render.cpp	/^void Render::draw(const sf::Drawable& drawable, int depth)$/;"	f	class:Render	signature:(const sf::Drawable& drawable, int depth)
Render::draw	render.h	/^		void draw(GameObject& to_draw, int depth = 0);$/;"	p	class:Render	access:public	signature:(GameObject& to_draw, int depth = 0)
Render::draw	render.h	/^		void draw(const sf::Drawable& to_draw, int depth = 0);$/;"	p	class:Render	access:public	signature:(const sf::Drawable& to_draw, int depth = 0)
Render::draw_queue	render.h	/^		std::vector<DrawEvent> draw_queue;$/;"	m	class:Render	access:private
Render::get_created_window	render.cpp	/^sf::RenderWindow* Render::get_created_window()$/;"	f	class:Render	signature:()
Render::get_created_window	render.h	/^		sf::RenderWindow* get_created_window();$/;"	p	class:Render	access:public	signature:()
Render::get_render_target	render.cpp	/^sf::RenderTarget* Render::get_render_target()$/;"	f	class:Render	signature:()
Render::get_render_target	render.h	/^		sf::RenderTarget* get_render_target();$/;"	p	class:Render	access:public	signature:()
Render::owns_render_target	render.h	/^		bool owns_render_target;$/;"	m	class:Render	access:private
Render::queue_draw_event	render.cpp	/^void Render::queue_draw_event(DrawEvent event)$/;"	f	class:Render	signature:(DrawEvent event)
Render::queue_draw_event	render.h	/^		void queue_draw_event(DrawEvent to_queue);$/;"	p	class:Render	access:private	signature:(DrawEvent to_queue)
Render::render	render.cpp	/^void Render::render()$/;"	f	class:Render	signature:()
Render::render	render.h	/^		void render();$/;"	p	class:Render	access:public	signature:()
Render::render_target	render.h	/^		sf::RenderTarget *render_target;$/;"	m	class:Render	access:private
Render::~Render	render.cpp	/^Render::~Render()$/;"	f	class:Render	signature:()
Render::~Render	render.h	/^		~Render();$/;"	p	class:Render	access:public	signature:()
Sprite	sprite.h	/^class Sprite: public sf::Sprite$/;"	c	inherits:sf::Sprite
Sprite::collision	sprite.h	/^		Collision collision;$/;"	m	class:Sprite	access:private
Vector2	vector.cpp	/^Vector2<T>::Vector2()$/;"	f	class:Vector2	signature:()
Vector2	vector.cpp	/^Vector2<T>::Vector2(T init_x, T init_y)$/;"	f	class:Vector2	signature:(T init_x, T init_y)
Vector2	vector.cpp	/^Vector2<T>::Vector2(const Vector2& copyfrom)$/;"	f	class:Vector2	signature:(const Vector2& copyfrom)
Vector2	vector.hpp	/^	Vector2<T>();$/;"	p	class:Vector2	access:public	signature:()
Vector2	vector.hpp	/^	Vector2<T>(T x, T y);$/;"	p	class:Vector2	access:public	signature:(T x, T y)
Vector2	vector.hpp	/^	Vector2<T>(const Vector2& copyfrom);$/;"	p	class:Vector2	access:public	signature:(const Vector2& copyfrom)
Vector2	vector.hpp	/^class Vector2$/;"	c
Vector2::Vector2	vector.cpp	/^Vector2<T>::Vector2()$/;"	f	class:Vector2	signature:()
Vector2::Vector2	vector.cpp	/^Vector2<T>::Vector2(T init_x, T init_y)$/;"	f	class:Vector2	signature:(T init_x, T init_y)
Vector2::Vector2	vector.cpp	/^Vector2<T>::Vector2(const Vector2& copyfrom)$/;"	f	class:Vector2	signature:(const Vector2& copyfrom)
Vector2::Vector2	vector.hpp	/^	Vector2<T>();$/;"	p	class:Vector2	access:public	signature:()
Vector2::Vector2	vector.hpp	/^	Vector2<T>(T x, T y);$/;"	p	class:Vector2	access:public	signature:(T x, T y)
Vector2::Vector2	vector.hpp	/^	Vector2<T>(const Vector2& copyfrom);$/;"	p	class:Vector2	access:public	signature:(const Vector2& copyfrom)
Vector2::operator +	vector.cpp	/^Vector2<T> Vector2<T>::operator + (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
Vector2::operator +	vector.hpp	/^	Vector2<T> operator + (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
Vector2::operator +=	vector.cpp	/^Vector2<T>& Vector2<T>::operator += (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
Vector2::operator +=	vector.hpp	/^	Vector2<T>& operator += (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
Vector2::operator -	vector.cpp	/^Vector2<T> Vector2<T>::operator - (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
Vector2::operator -	vector.hpp	/^	Vector2<T> operator - (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
Vector2::operator -=	vector.cpp	/^Vector2<T>& Vector2<T>::operator -= (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
Vector2::operator -=	vector.hpp	/^	Vector2<T>& operator -= (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
Vector2::operator =	vector.cpp	/^Vector2<T>& Vector2<T>::operator = (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
Vector2::operator =	vector.hpp	/^	Vector2<T>& operator = (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
Vector2::x	vector.hpp	/^	T x, y;$/;"	m	class:Vector2	access:public
Vector2::y	vector.hpp	/^	T x, y;$/;"	m	class:Vector2	access:public
WindowStatus	input.h	/^struct WindowStatus$/;"	s
WindowStatus::closed	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
WindowStatus::entered_text	input.h	/^	std::string entered_text;$/;"	m	struct:WindowStatus	access:public
WindowStatus::gained_focus	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
WindowStatus::has_focus	input.h	/^	bool mouse_is_in_window, has_focus;$/;"	m	struct:WindowStatus	access:public
WindowStatus::lost_focus	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
WindowStatus::mouse_is_in_window	input.h	/^	bool mouse_is_in_window, has_focus;$/;"	m	struct:WindowStatus	access:public
WindowStatus::resized	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
WindowStatus::text_entered	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
__GAMEOBJECT_H__	gameobject.h	2;"	d
__IDS_H__	ids.h	2;"	d
__INPUT_H__	input.h	2;"	d
__OBJECTEVENT_H__	objectevent.h	2;"	d
__RENDER_H__	render.h	2;"	d
__SPRITE_H__	sprite.h	2;"	d
__VECTOR_HPP__	vector.hpp	2;"	d
acceleration	gameobject.h	/^		Vector2<double> acceleration;$/;"	m	class:GameObject	access:protected
add_acceleration	gameobject.cpp	/^void GameObject::add_acceleration(const Vector2<double>& acceleration_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& acceleration_vector)
add_acceleration	gameobject.cpp	/^void GameObject::add_acceleration(float x, float y)$/;"	f	class:GameObject	signature:(float x, float y)
add_acceleration	gameobject.h	/^		void add_acceleration(const Vector2<double>& acceleration_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& acceleration_vector)
add_acceleration	gameobject.h	/^		void add_acceleration(float x, float y);$/;"	p	class:GameObject	access:public	signature:(float x, float y)
add_animation	gameobject.cpp	/^int GameObject::add_animation()$/;"	f	class:GameObject	signature:()
add_animation	gameobject.h	/^		int add_animation();$/;"	p	class:GameObject	access:public	signature:()
add_frame	gameobject.cpp	/^void GameObject::add_frame(int animation, Sprite* sprite, int n)$/;"	f	class:GameObject	signature:(int animation, Sprite* sprite, int n)
add_frame	gameobject.h	/^		void add_frame(int animation, Sprite* sprite, int n);$/;"	p	class:GameObject	access:public	signature:(int animation, Sprite* sprite, int n)
add_velocity	gameobject.cpp	/^void GameObject::add_velocity(const Vector2<double>& velocity_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& velocity_vector)
add_velocity	gameobject.cpp	/^void GameObject::add_velocity(float x, float y)$/;"	f	class:GameObject	signature:(float x, float y)
add_velocity	gameobject.h	/^		void add_velocity(const Vector2<double>& velocity_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& velocity_vector)
add_velocity	gameobject.h	/^		void add_velocity(float x, float y);$/;"	p	class:GameObject	access:public	signature:(float x, float y)
animations	gameobject.h	/^		std::vector< std::vector<Sprite*> > animations;$/;"	m	class:GameObject	access:protected
append_frame	gameobject.cpp	/^void GameObject::append_frame(int animation, Sprite* sprite)$/;"	f	class:GameObject	signature:(int animation, Sprite* sprite)
append_frame	gameobject.h	/^		void append_frame(int animation, Sprite* sprite);$/;"	p	class:GameObject	access:public	signature:(int animation, Sprite* sprite)
bounding_box	sprite.h	/^	std::vector< sf::Rect<int> > bounding_box;$/;"	m	struct:Collision	access:public
clear	render.cpp	/^void Render::clear(sf::Color color, int depth)$/;"	f	class:Render	signature:(sf::Color color, int depth)
clear	render.h	/^		void clear(sf::Color clear_to = sf::Color::Black, int depth = 99999999);$/;"	p	class:Render	access:public	signature:(sf::Color clear_to = sf::Color::Black, int depth = 99999999)
clear_queue	render.cpp	/^void Render::clear_queue()$/;"	f	class:Render	signature:()
clear_queue	render.h	/^		void clear_queue();$/;"	p	class:Render	access:private	signature:()
closed	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
collision	sprite.h	/^		Collision collision;$/;"	m	class:Sprite	access:private
color	render.h	/^	sf::Color color;$/;"	m	struct:DrawEvent	access:public
current_animation	gameobject.h	/^		int current_animation, current_frame;$/;"	m	class:GameObject	access:protected
current_frame	gameobject.h	/^		int current_animation, current_frame;$/;"	m	class:GameObject	access:protected
depth	gameobject.h	/^		int depth;$/;"	m	class:GameObject	access:protected
depth	render.h	/^	int depth;$/;"	m	struct:DrawEvent	access:public
down	input.h	/^	bool down;$/;"	m	struct:ButtonStatus	access:public
draw	render.cpp	/^void Render::draw(GameObject& object, int depth)$/;"	f	class:Render	signature:(GameObject& object, int depth)
draw	render.cpp	/^void Render::draw(const sf::Drawable& drawable, int depth)$/;"	f	class:Render	signature:(const sf::Drawable& drawable, int depth)
draw	render.h	/^		void draw(GameObject& to_draw, int depth = 0);$/;"	p	class:Render	access:public	signature:(GameObject& to_draw, int depth = 0)
draw	render.h	/^		void draw(const sf::Drawable& to_draw, int depth = 0);$/;"	p	class:Render	access:public	signature:(const sf::Drawable& to_draw, int depth = 0)
draw_event_lt	render.cpp	/^static bool draw_event_lt(DrawEvent de1, DrawEvent de2)$/;"	f	file:	signature:(DrawEvent de1, DrawEvent de2)
draw_queue	render.h	/^		std::vector<DrawEvent> draw_queue;$/;"	m	class:Render	access:private
drawable	render.h	/^	const sf::Drawable* drawable;$/;"	m	struct:DrawEvent	access:public
entered_text	input.h	/^	std::string entered_text;$/;"	m	struct:WindowStatus	access:public
events	gameobject.h	/^		std::vector< ObjectEvent* > events;$/;"	m	class:GameObject	access:protected
gained_focus	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
get_created_window	render.cpp	/^sf::RenderWindow* Render::get_created_window()$/;"	f	class:Render	signature:()
get_created_window	render.h	/^		sf::RenderWindow* get_created_window();$/;"	p	class:Render	access:public	signature:()
get_current_frame	gameobject.cpp	/^Sprite* GameObject::get_current_frame()$/;"	f	class:GameObject	signature:()
get_current_frame	gameobject.h	/^		Sprite* get_current_frame();$/;"	p	class:GameObject	access:public	signature:()
get_frame	gameobject.cpp	/^Sprite* GameObject::get_frame(int animation, int n)$/;"	f	class:GameObject	signature:(int animation, int n)
get_frame	gameobject.cpp	/^Sprite* GameObject::get_frame(int n)$/;"	f	class:GameObject	signature:(int n)
get_frame	gameobject.h	/^		Sprite* get_frame(int animation, int n);$/;"	p	class:GameObject	access:public	signature:(int animation, int n)
get_frame	gameobject.h	/^		Sprite* get_frame(int n);$/;"	p	class:GameObject	access:public	signature:(int n)
get_position	gameobject.cpp	/^Vector2<double> GameObject::get_position()$/;"	f	class:GameObject	signature:()
get_position	gameobject.h	/^		Vector2<double> get_position();$/;"	p	class:GameObject	access:public	signature:()
get_render_target	render.cpp	/^sf::RenderTarget* Render::get_render_target()$/;"	f	class:Render	signature:()
get_render_target	render.h	/^		sf::RenderTarget* get_render_target();$/;"	p	class:Render	access:public	signature:()
get_trigger	objectevent.cpp	/^bool* ObjectEvent::get_trigger()$/;"	f	class:ObjectEvent	signature:()
get_trigger	objectevent.h	/^		bool* get_trigger();$/;"	p	class:ObjectEvent	access:public	signature:()
has_focus	input.h	/^	bool mouse_is_in_window, has_focus;$/;"	m	struct:WindowStatus	access:public
id	gameobject.h	/^		GameObjectId id;$/;"	m	class:GameObject	access:protected
id	render.h	/^	DrawEventId id;$/;"	m	struct:DrawEvent	access:public
instance_id	gameobject.h	/^		int instance_id;$/;"	m	class:GameObject	access:protected
key_state	input.cpp	/^ButtonStatus Input::key_state(sf::Keyboard::Key key)$/;"	f	class:Input	signature:(sf::Keyboard::Key key)
key_state	input.h	/^		ButtonStatus key_state(sf::Keyboard::Key key);$/;"	p	class:Input	access:public	signature:(sf::Keyboard::Key key)
key_states	input.h	/^		std::vector<ButtonStatus> key_states;$/;"	m	class:Input	access:private
keyboard_key_names	input.cpp	/^const std::string keyboard_key_names[] = {$/;"	v
lost_focus	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
mouse_button_names	input.cpp	/^const std::string mouse_button_names[] = {$/;"	v
mouse_is_in_window	input.h	/^	bool mouse_is_in_window, has_focus;$/;"	m	struct:WindowStatus	access:public
mouse_pos	input.cpp	/^sf::Vector2f Input::mouse_pos()$/;"	f	class:Input	signature:()
mouse_pos	input.h	/^		sf::Vector2f mouse_pos();$/;"	p	class:Input	access:public	signature:()
mouse_pos_rel	input.cpp	/^sf::Vector2f Input::mouse_pos_rel()$/;"	f	class:Input	signature:()
mouse_pos_rel	input.h	/^		sf::Vector2f mouse_pos_rel();$/;"	p	class:Input	access:public	signature:()
mouse_position	input.h	/^		sf::Vector2f mouse_position, mouse_position_rel;$/;"	m	class:Input	access:private
mouse_position_rel	input.h	/^		sf::Vector2f mouse_position, mouse_position_rel;$/;"	m	class:Input	access:private
mouse_state	input.cpp	/^ButtonStatus Input::mouse_state(sf::Mouse::Button button)$/;"	f	class:Input	signature:(sf::Mouse::Button button)
mouse_state	input.h	/^		ButtonStatus mouse_state(sf::Mouse::Button button);$/;"	p	class:Input	access:public	signature:(sf::Mouse::Button button)
mouse_states	input.h	/^		std::vector<ButtonStatus> mouse_states;$/;"	m	class:Input	access:private
move	gameobject.cpp	/^void GameObject::move(const Vector2<double>& move_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& move_vector)
move	gameobject.cpp	/^void GameObject::move(double x, double y)$/;"	f	class:GameObject	signature:(double x, double y)
move	gameobject.h	/^		void move(const Vector2<double>& move_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& move_vector)
move	gameobject.h	/^		void move(double x, double y);$/;"	p	class:GameObject	access:public	signature:(double x, double y)
next_frame	gameobject.cpp	/^void GameObject::next_frame()$/;"	f	class:GameObject	signature:()
next_frame	gameobject.h	/^		void next_frame();$/;"	p	class:GameObject	access:public	signature:()
operator +	vector.cpp	/^Vector2<T> Vector2<T>::operator + (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
operator +	vector.hpp	/^	Vector2<T> operator + (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
operator +=	vector.cpp	/^Vector2<T>& Vector2<T>::operator += (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
operator +=	vector.hpp	/^	Vector2<T>& operator += (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
operator -	vector.cpp	/^Vector2<T> Vector2<T>::operator - (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
operator -	vector.hpp	/^	Vector2<T> operator - (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
operator -=	vector.cpp	/^Vector2<T>& Vector2<T>::operator -= (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
operator -=	vector.hpp	/^	Vector2<T>& operator -= (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
operator <	render.h	/^	bool operator < (const DrawEvent& event) const$/;"	f	struct:DrawEvent	access:public	signature:(const DrawEvent& event) const
operator =	vector.cpp	/^Vector2<T>& Vector2<T>::operator = (const Vector2<T>& other)$/;"	f	class:Vector2	signature:(const Vector2<T>& other)
operator =	vector.hpp	/^	Vector2<T>& operator = (const Vector2<T>& other);$/;"	p	class:Vector2	access:public	signature:(const Vector2<T>& other)
outstream	input.h	/^		std::ostream *outstream;$/;"	m	class:Input	access:private
owns_render_target	render.h	/^		bool owns_render_target;$/;"	m	class:Render	access:private
position	gameobject.h	/^		Vector2<double> position;$/;"	m	class:GameObject	access:protected
pressed	input.h	/^	bool pressed;$/;"	m	struct:ButtonStatus	access:public
process	objectevent.cpp	/^void ObjectEvent::process()$/;"	f	class:ObjectEvent	signature:()
process	objectevent.h	/^		void process();$/;"	p	class:ObjectEvent	access:public	signature:()
process_events	gameobject.cpp	/^void GameObject::process_events()$/;"	f	class:GameObject	signature:()
process_events	gameobject.h	/^		void process_events();$/;"	p	class:GameObject	access:public	signature:()
process_events	gameobject.h	/^		void process_events(T);$/;"	p	class:GameObject	access:public	signature:(T)
queue_draw_event	render.cpp	/^void Render::queue_draw_event(DrawEvent event)$/;"	f	class:Render	signature:(DrawEvent event)
queue_draw_event	render.h	/^		void queue_draw_event(DrawEvent to_queue);$/;"	p	class:Render	access:private	signature:(DrawEvent to_queue)
register_event	gameobject.cpp	/^void GameObject::register_event(bool* trigger, void (*response)() )$/;"	f	class:GameObject	signature:(bool* trigger, void (*response)() )
register_event	gameobject.h	/^		void register_event(bool*, void (*new_response)() );$/;"	p	class:GameObject	access:public	signature:(bool*, void (*new_response)() )
register_event	gameobject.h	/^		void register_event(bool*, void (*new_response)(T) );$/;"	p	class:GameObject	access:public	signature:(bool*, void (*new_response)(T) )
released	input.h	/^	bool released;$/;"	m	struct:ButtonStatus	access:public
remove_event	gameobject.cpp	/^void GameObject::remove_event(bool* tocheck)$/;"	f	class:GameObject	signature:(bool* tocheck)
remove_event	gameobject.h	/^		void remove_event(bool*);$/;"	p	class:GameObject	access:public	signature:(bool*)
render	render.cpp	/^void Render::render()$/;"	f	class:Render	signature:()
render	render.h	/^		void render();$/;"	p	class:Render	access:public	signature:()
render_target	render.h	/^		sf::RenderTarget *render_target;$/;"	m	class:Render	access:private
resized	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
response	objectevent.h	/^		void (*response)();$/;"	m	class:ObjectEvent	access:private
set	objectevent.cpp	/^void ObjectEvent::set(bool* new_trigger, void (*new_response)())$/;"	f	class:ObjectEvent	signature:(bool* new_trigger, void (*new_response)())
set	objectevent.h	/^		void set(bool*, void (*response)(GameObject*));$/;"	p	class:ObjectEvent	access:public	signature:(bool*, void (*response)(GameObject*))
set_acceleration	gameobject.cpp	/^void GameObject::set_acceleration(const Vector2<double>& acceleration_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& acceleration_vector)
set_acceleration	gameobject.cpp	/^void GameObject::set_acceleration(float x, float y)$/;"	f	class:GameObject	signature:(float x, float y)
set_acceleration	gameobject.h	/^		void set_acceleration(const Vector2<double>& acceleration_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& acceleration_vector)
set_acceleration	gameobject.h	/^		void set_acceleration(float x, float y);$/;"	p	class:GameObject	access:public	signature:(float x, float y)
set_animation	gameobject.cpp	/^void GameObject::set_animation(int animation)$/;"	f	class:GameObject	signature:(int animation)
set_animation	gameobject.h	/^		void set_animation(int animation);$/;"	p	class:GameObject	access:public	signature:(int animation)
set_frame	gameobject.cpp	/^void GameObject::set_frame(int n)$/;"	f	class:GameObject	signature:(int n)
set_frame	gameobject.h	/^		void set_frame(int n);$/;"	p	class:GameObject	access:public	signature:(int n)
set_position	gameobject.cpp	/^void GameObject::set_position(const Vector2<double>& set_to)$/;"	f	class:GameObject	signature:(const Vector2<double>& set_to)
set_position	gameobject.cpp	/^void GameObject::set_position(double x, double y)$/;"	f	class:GameObject	signature:(double x, double y)
set_position	gameobject.h	/^		void set_position(const Vector2<double>& set_to);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& set_to)
set_position	gameobject.h	/^		void set_position(double x, double y);$/;"	p	class:GameObject	access:public	signature:(double x, double y)
set_response	objectevent.cpp	/^void ObjectEvent::set_response(void (*new_response)())$/;"	f	class:ObjectEvent	signature:(void (*new_response)())
set_response	objectevent.h	/^		void set_response(void (*response)(GameObject*));$/;"	p	class:ObjectEvent	access:public	signature:(void (*response)(GameObject*))
set_trigger	objectevent.cpp	/^void ObjectEvent::set_trigger(bool* new_trigger)$/;"	f	class:ObjectEvent	signature:(bool* new_trigger)
set_trigger	objectevent.h	/^		void set_trigger(bool* trigger);$/;"	p	class:ObjectEvent	access:public	signature:(bool* trigger)
set_velocity	gameobject.cpp	/^void GameObject::set_velocity(const Vector2<double>& velocity_vector)$/;"	f	class:GameObject	signature:(const Vector2<double>& velocity_vector)
set_velocity	gameobject.cpp	/^void GameObject::set_velocity(double x, double y)$/;"	f	class:GameObject	signature:(double x, double y)
set_velocity	gameobject.h	/^		void set_velocity(const Vector2<double>& velocity_vector);$/;"	p	class:GameObject	access:public	signature:(const Vector2<double>& velocity_vector)
set_velocity	gameobject.h	/^		void set_velocity(double x, double y);$/;"	p	class:GameObject	access:public	signature:(double x, double y)
start_logging	input.cpp	/^void Input::start_logging(std::ostream &logstream)$/;"	f	class:Input	signature:(std::ostream &logstream)
start_logging	input.h	/^		void start_logging(std::ostream &logstream);$/;"	p	class:Input	access:public	signature:(std::ostream &logstream)
stop_logging	input.cpp	/^void Input::stop_logging()$/;"	f	class:Input	signature:()
stop_logging	input.h	/^		void stop_logging();$/;"	p	class:Input	access:public	signature:()
text_entered	input.h	/^	bool closed, resized, lost_focus, gained_focus, text_entered;$/;"	m	struct:WindowStatus	access:public
trigger	objectevent.h	/^		bool* trigger;$/;"	m	class:ObjectEvent	access:private
update	input.cpp	/^void Input::update()$/;"	f	class:Input	signature:()
update	input.h	/^		void update();$/;"	p	class:Input	access:public	signature:()
update_sprite	gameobject.cpp	/^void GameObject::update_sprite()$/;"	f	class:GameObject	signature:()
update_sprite	gameobject.h	/^		void update_sprite();$/;"	p	class:GameObject	access:public	signature:()
velocity	gameobject.h	/^		Vector2<double> velocity;$/;"	m	class:GameObject	access:protected
window	input.h	/^		sf::Window *window;$/;"	m	class:Input	access:private
window_events	input.cpp	/^WindowStatus Input::window_events()$/;"	f	class:Input	signature:()
window_events	input.h	/^		WindowStatus window_events();$/;"	p	class:Input	access:public	signature:()
window_status	input.h	/^		WindowStatus window_status;$/;"	m	class:Input	access:private
x	vector.hpp	/^	T x, y;$/;"	m	class:Vector2	access:public
y	vector.hpp	/^	T x, y;$/;"	m	class:Vector2	access:public
~GameObject	gameobject.cpp	/^GameObject::~GameObject()$/;"	f	class:GameObject	signature:()
~GameObject	gameobject.h	/^		~GameObject();$/;"	p	class:GameObject	access:public	signature:()
~Input	input.cpp	/^Input::~Input()$/;"	f	class:Input	signature:()
~Input	input.h	/^		~Input();$/;"	p	class:Input	access:public	signature:()
~Render	render.cpp	/^Render::~Render()$/;"	f	class:Render	signature:()
~Render	render.h	/^		~Render();$/;"	p	class:Render	access:public	signature:()
